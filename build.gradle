plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.3.3"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		url "https://maven.terraformersmc.com/"
	}
	maven {
		url "https://maven.isxander.dev/releases"
	}
	maven {
		url "https://jitpack.io"
	}
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}

	repositories {
		exclusiveContent {
			forRepository {
				maven {
					name = "Modrinth"
					url = "https://api.modrinth.com/maven"
				}
			}
			filter {
				includeGroup "maven.modrinth"
			}
		}
	}
}

loom {
    splitEnvironmentSourceSets()

    mods {
        modid {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

	runs {
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${archivesBaseName}"

			runDir "build/datagen"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.1.1")))

	// config
	modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

	// mod compats
	modCompileOnly("maven.modrinth:illager-invasion:${project.illager_invasion_version}")
	modCompileOnly("maven.modrinth:friends-and-foes:${project.friends_and_foes_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

publishMods {
	file = remapJar.archiveFile
	changelog = "[Changelog](https://github.com/Bawnorton/BetterTrims/releases/tag/%s)".formatted(project.version)
	type = STABLE
	modLoaders.add("fabric")

	github {
		accessToken = providers.environmentVariable("GITHUB_TOKEN")
		repository = "Bawnorton/BetterTrims"
		commitish = "main"
		changelog = file("CHANGELOG.md").readLines().join("\n")
		displayName = project.version
	}

	curseforge {
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		projectId = "821752"
		minecraftVersions.addAll("1.20", "1.20.1")
		displayName = "bettertrims-%s.jar".formatted(project.version)

		requires {
			slug = "fabric-api"
		}
	}

	modrinth {
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		projectId = "98ytUvlc"
		minecraftVersions.addAll("1.20", "1.20.1")
		displayName = "Better Trims Trims %s".formatted(project.version)

		requires {
			slug = "fabric-api"
		}
	}
}